// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: AnalyticsData.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from AnalyticsData.proto</summary>
public static partial class AnalyticsDataReflection {

  #region Descriptor
  /// <summary>File descriptor for AnalyticsData.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static AnalyticsDataReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChNBbmFseXRpY3NEYXRhLnByb3RvIksKCVRpbWVzdGFtcBIlCghjYXRlZ29y",
          "eRgBIAEoDjITLkVUaW1lc3RhbXBDYXRlZ29yeRIXCg9sb2dnZWRUaW1lc3Rh",
          "bXAYAiABKAMicQoOVUlfSW50ZXJhY3Rpb24SDAoEbmFtZRgBIAEoCRIbCgZh",
          "Y3Rpb24YAiABKA4yCy5FVUlfQWN0aW9uEiMKD2xvZ2dlZFRpbWVzdGFtcBgD",
          "IAEoCzIKLlRpbWVzdGFtcBIPCgdtZXNzYWdlGAQgASgJImYKB1RpbWVMb2cS",
          "DAoEbmFtZRgBIAEoCRIXCgR0eXBlGAIgASgOMgkuRUxvZ1R5cGUSIwoPbG9n",
          "Z2VkVGltZXN0YW1wGAMgASgLMgouVGltZXN0YW1wEg8KB21lc3NhZ2UYBCAB",
          "KAki4AoKC01hY2hpbmVTcGVjEhMKC2RldmljZU1vZGVsGAEgASgJEhIKCmRl",
          "dmljZU5hbWUYAiABKAkSEgoKZGV2aWNlVHlwZRgDIAEoDRIRCglkZXZpY2VV",
          "SUQYBCABKAkSDQoFZ3B1SUQYBSABKAUSDwoHZ3B1TmFtZRgGIAEoCRIPCgdn",
          "cHVUeXBlGAcgASgNEhEKCWdwdVZlbmRvchgIIAEoCRITCgtncHVWZW5kb3JJ",
          "RBgJIAEoBRISCgpncHVWZXJzaW9uGAogASgJEhQKDGdwdU1lbW9yeV9tYhgL",
          "IAEoBRIWCg5ncHVNdWx0aXRocmVhZBgMIAEoCBIUCgxncHVTaGFkZXJMdmwY",
          "DSABKAUSFgoObWF4Q3ViZW1hcFNpemUYDiABKAUSFgoObWF4VGV4dHVyZVNp",
          "emUYDyABKAUSCgoCb3MYECABKAkSEAoIb3NGYW1pbHkYESABKA0SFQoNcHJv",
          "Y2Vzc29yTmFtZRgSIAEoCRIWCg5wcm9jZXNzb3JDb3VudBgTIAEoBRIaChJw",
          "cm9jZXNzb3JGcmVxdWVuY3kYFCABKAUSEgoKYmF0dGVyeUx2bBgVIAEoDRIV",
          "Cg1iYXR0ZXJ5U3RhdHVzGBYgASgNEhsKE3N5c3RlbU1lbW9yeVNpemVfbWIY",
          "FyABKAUSJwofc3VwcG9ydGVkUmFuZG9tV3JpdGVUYXJnZXRDb3VudBgYIAEo",
          "BRIiChpzdXBwb3J0ZWRSZW5kZXJUYXJnZXRDb3VudBgZIAEoBRIeChZzdXBw",
          "b3J0czJEQXJyYXlUZXh0dXJlGBogASgIEiEKGXN1cHBvcnRzMzJiaXRzSW5k",
          "ZXhCdWZmZXIYGyABKAgSIAoYc3VwcG9ydHMzRFJlbmRlclRleHR1cmVzGBwg",
          "ASgIEhoKEnN1cHBvcnRzM0RUZXh0dXJlcxgdIAEoCBIcChRzdXBwb3J0c0Fz",
          "eW5jQ29tcHV0ZRgeIAEoCBIgChhzdXBwb3J0c0FzeW5jR1BVUmVhZGJhY2sY",
          "HyABKAgSHQoVc3VwcG9ydHNDb21wdXRlU2hhZGVyGCAgASgIEiQKHHN1cHBv",
          "cnRzQ3ViZW1hcEFycmF5VGV4dHVyZXMYISABKAgSHwoXc3VwcG9ydHNHZW9t",
          "ZXRyeVNoYWRlcnMYIiABKAgSHAoUc3VwcG9ydHNHcmFwaGljRmVuY2UYIyAB",
          "KAgSJAocc3VwcG9ydHNIYXJkd2FyZVF1YWRUb3BvbG9neRgkIAEoCBIlCh1z",
          "dXBwb3J0c0dQVURyYXdDYWxsSW5zdGFuY2luZxglIAEoCBIfChdzdXBwb3J0",
          "c0xvY2F0aW9uU2VydmljZRgmIAEoCBIcChRzdXBwb3J0c01pcFN0cmVhbWlu",
          "ZxgnIAEoCBIcChRzdXBwb3J0c01vdGlvblZlY3RvchgoIAEoCBImCh5zdXBw",
          "b3J0c011bHRpc2FtcGxlQXV0b1Jlc29sdmUYKSABKAgSJAocc3VwcG9ydHNN",
          "dWx0aXNhbXBsZWRUZXh0dXJlcxgqIAEoBRIrCiNzdXBwb3J0c1NlcGFyYXRl",
          "ZFJlbmRlclRhcmdldHNCbGVuZBgrIAEoCBIhChlzdXBwb3J0c1NldENvbnN0",
          "YW50QnVmZmVyGCwgASgIEh4KFnN1cHBvcnRzU3BhcnNlVGV4dHVyZXMYLSAB",
          "KAgSIwobc3VwcG9ydHNUZXNzZWxsYXRpb25TaGFkZXJzGC4gASgIEiUKHXN1",
          "cHBvcnRzVGV4dHVyZVdyYXBNaXJyb3JPbmNlGC8gASgFEhMKC3NjcmVlbldp",
          "ZHRoGDAgASgNEhQKDHNjcmVlbkhlaWdodBgxIAEoDSJaChJJbnRlcmFjdGlv",
          "blN1bW1hcnkSDAoEbmFtZRgBIAEoCRINCgVjb3VudBgCIAEoDRINCgVob3Vy",
          "cxgDIAEoBBILCgNtaW4YBCABKAQSCwoDc2VjGAUgASgEIl0KCFVzZXJEYXRh",
          "EgwKBHBhaWQYASABKAgSEQoJbGljZW5zZUlEGAIgASgJEhQKDHNlc3Npb25D",
          "b3VudBgDIAEoDRIaChJ0dXRvcmlhbENvbXBsZXRpb24YBCABKAgiqwIKC1Nl",
          "c3Npb25EYXRhEhcKBHVzZXIYASABKAsyCS5Vc2VyRGF0YRISCgpzZXNzaW9u",
          "VUlEGAIgASgJEiQKDnNlc3Npb25NYWNoaW5lGAMgASgLMgwuTWFjaGluZVNw",
          "ZWMSJAoQc2Vzc2lvblRpbWVzdGFtcBgEIAEoCzIKLlRpbWVzdGFtcBIgCg5w",
          "YWdlQW5kVG9vbExvZxgFIAMoCzIILlRpbWVMb2cSJwoOaW50ZXJhY3Rpb25M",
          "b2cYBiADKAsyDy5VSV9JbnRlcmFjdGlvbhIrCg5wYWdlVXNlU3VtbWFyeRgH",
          "IAMoCzITLkludGVyYWN0aW9uU3VtbWFyeRIrCg50b29sVXNlU3VtbWFyeRgI",
          "IAMoCzITLkludGVyYWN0aW9uU3VtbWFyeSIPCg1DdXJzb3JUaW1lbG9nIhYK",
          "FFNlc3Npb25DdXJzb3JIaXN0b3J5KqcCCgpFVUlfQWN0aW9uEhEKDVBPSU5U",
          "RVJfRU5URVIQABIQCgxQT0lOVEVSX0VYSVQQARIQCgxQT0lOVEVSX0RPV04Q",
          "AhIOCgpQT0lOVEVSX1VQEAMSEQoNUE9JTlRFUl9DTElDSxAEEggKBERSQUcQ",
          "BRIICgREUk9QEAYSCgoGU0NST0xMEAcSEwoPVURQQVRFX1NFTEVDVEVEEAgS",
          "CgoGU0VMRUNUEAkSDAoIREVTRUxFQ1QQChIICgRNT1ZFEAsSHQoZSU5JVElB",
          "TElaRV9QT1RFTlRJQUxfRFJBRxAMEg4KCkJFR0lOX0RSQUcQDRIMCghFTkRf",
          "RFJBRxAOEgoKBlNVQk1JVBAPEgoKBkNBTkNFTBAQEhEKDVZBTFVFX1VQREFU",
          "RUQQESo9ChJFVGltZXN0YW1wQ2F0ZWdvcnkSDQoJQkVHSU5fVVNFEAASCwoH",
          "RU5EX1VTRRABEgsKB09ORV9PRkYQAioeCghFTG9nVHlwZRIICgRQQUdFEAAS",
          "CAoEVE9PTBABYgZwcm90bzM="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(new[] {typeof(global::EUI_Action), typeof(global::ETimestampCategory), typeof(global::ELogType), }, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::Timestamp), global::Timestamp.Parser, new[]{ "Category", "LoggedTimestamp" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::UI_Interaction), global::UI_Interaction.Parser, new[]{ "Name", "Action", "LoggedTimestamp", "Message" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TimeLog), global::TimeLog.Parser, new[]{ "Name", "Type", "LoggedTimestamp", "Message" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MachineSpec), global::MachineSpec.Parser, new[]{ "DeviceModel", "DeviceName", "DeviceType", "DeviceUID", "GpuID", "GpuName", "GpuType", "GpuVendor", "GpuVendorID", "GpuVersion", "GpuMemoryMb", "GpuMultithread", "GpuShaderLvl", "MaxCubemapSize", "MaxTextureSize", "Os", "OsFamily", "ProcessorName", "ProcessorCount", "ProcessorFrequency", "BatteryLvl", "BatteryStatus", "SystemMemorySizeMb", "SupportedRandomWriteTargetCount", "SupportedRenderTargetCount", "Supports2DArrayTexture", "Supports32BitsIndexBuffer", "Supports3DRenderTextures", "Supports3DTextures", "SupportsAsyncCompute", "SupportsAsyncGPUReadback", "SupportsComputeShader", "SupportsCubemapArrayTextures", "SupportsGeometryShaders", "SupportsGraphicFence", "SupportsHardwareQuadTopology", "SupportsGPUDrawCallInstancing", "SupportsLocationService", "SupportsMipStreaming", "SupportsMotionVector", "SupportsMultisampleAutoResolve", "SupportsMultisampledTextures", "SupportsSeparatedRenderTargetsBlend", "SupportsSetConstantBuffer", "SupportsSparseTextures", "SupportsTessellationShaders", "SupportsTextureWrapMirrorOnce", "ScreenWidth", "ScreenHeight" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::InteractionSummary), global::InteractionSummary.Parser, new[]{ "Name", "Count", "Hours", "Min", "Sec" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::UserData), global::UserData.Parser, new[]{ "Paid", "LicenseID", "SessionCount", "TutorialCompletion" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SessionData), global::SessionData.Parser, new[]{ "User", "SessionUID", "SessionMachine", "SessionTimestamp", "PageAndToolLog", "InteractionLog", "PageUseSummary", "ToolUseSummary" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CursorTimelog), global::CursorTimelog.Parser, null, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SessionCursorHistory), global::SessionCursorHistory.Parser, null, null, null, null, null)
        }));
  }
  #endregion

}
#region Enums
public enum EUI_Action {
  [pbr::OriginalName("POINTER_ENTER")] PointerEnter = 0,
  [pbr::OriginalName("POINTER_EXIT")] PointerExit = 1,
  [pbr::OriginalName("POINTER_DOWN")] PointerDown = 2,
  [pbr::OriginalName("POINTER_UP")] PointerUp = 3,
  [pbr::OriginalName("POINTER_CLICK")] PointerClick = 4,
  [pbr::OriginalName("DRAG")] Drag = 5,
  [pbr::OriginalName("DROP")] Drop = 6,
  [pbr::OriginalName("SCROLL")] Scroll = 7,
  [pbr::OriginalName("UDPATE_SELECTED")] UdpateSelected = 8,
  [pbr::OriginalName("SELECT")] Select = 9,
  [pbr::OriginalName("DESELECT")] Deselect = 10,
  [pbr::OriginalName("MOVE")] Move = 11,
  [pbr::OriginalName("INITIALIZE_POTENTIAL_DRAG")] InitializePotentialDrag = 12,
  [pbr::OriginalName("BEGIN_DRAG")] BeginDrag = 13,
  [pbr::OriginalName("END_DRAG")] EndDrag = 14,
  [pbr::OriginalName("SUBMIT")] Submit = 15,
  [pbr::OriginalName("CANCEL")] Cancel = 16,
  [pbr::OriginalName("VALUE_UPDATED")] ValueUpdated = 17,
}

public enum ETimestampCategory {
  [pbr::OriginalName("BEGIN_USE")] BeginUse = 0,
  [pbr::OriginalName("END_USE")] EndUse = 1,
  [pbr::OriginalName("ONE_OFF")] OneOff = 2,
}

public enum ELogType {
  [pbr::OriginalName("PAGE")] Page = 0,
  [pbr::OriginalName("TOOL")] Tool = 1,
}

#endregion

#region Messages
public sealed partial class Timestamp : pb::IMessage<Timestamp>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<Timestamp> _parser = new pb::MessageParser<Timestamp>(() => new Timestamp());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Timestamp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AnalyticsDataReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Timestamp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Timestamp(Timestamp other) : this() {
    category_ = other.category_;
    loggedTimestamp_ = other.loggedTimestamp_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Timestamp Clone() {
    return new Timestamp(this);
  }

  /// <summary>Field number for the "category" field.</summary>
  public const int CategoryFieldNumber = 1;
  private global::ETimestampCategory category_ = global::ETimestampCategory.BeginUse;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ETimestampCategory Category {
    get { return category_; }
    set {
      category_ = value;
    }
  }

  /// <summary>Field number for the "loggedTimestamp" field.</summary>
  public const int LoggedTimestampFieldNumber = 2;
  private long loggedTimestamp_;
  /// <summary>
  /// from DateTime.ToBinary()
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long LoggedTimestamp {
    get { return loggedTimestamp_; }
    set {
      loggedTimestamp_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Timestamp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Timestamp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Category != other.Category) return false;
    if (LoggedTimestamp != other.LoggedTimestamp) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Category != global::ETimestampCategory.BeginUse) hash ^= Category.GetHashCode();
    if (LoggedTimestamp != 0L) hash ^= LoggedTimestamp.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (Category != global::ETimestampCategory.BeginUse) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Category);
    }
    if (LoggedTimestamp != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(LoggedTimestamp);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (Category != global::ETimestampCategory.BeginUse) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Category);
    }
    if (LoggedTimestamp != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(LoggedTimestamp);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Category != global::ETimestampCategory.BeginUse) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Category);
    }
    if (LoggedTimestamp != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(LoggedTimestamp);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Timestamp other) {
    if (other == null) {
      return;
    }
    if (other.Category != global::ETimestampCategory.BeginUse) {
      Category = other.Category;
    }
    if (other.LoggedTimestamp != 0L) {
      LoggedTimestamp = other.LoggedTimestamp;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Category = (global::ETimestampCategory) input.ReadEnum();
          break;
        }
        case 16: {
          LoggedTimestamp = input.ReadInt64();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Category = (global::ETimestampCategory) input.ReadEnum();
          break;
        }
        case 16: {
          LoggedTimestamp = input.ReadInt64();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class UI_Interaction : pb::IMessage<UI_Interaction>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<UI_Interaction> _parser = new pb::MessageParser<UI_Interaction>(() => new UI_Interaction());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<UI_Interaction> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AnalyticsDataReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UI_Interaction() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UI_Interaction(UI_Interaction other) : this() {
    name_ = other.name_;
    action_ = other.action_;
    loggedTimestamp_ = other.loggedTimestamp_ != null ? other.loggedTimestamp_.Clone() : null;
    message_ = other.message_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UI_Interaction Clone() {
    return new UI_Interaction(this);
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 1;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "action" field.</summary>
  public const int ActionFieldNumber = 2;
  private global::EUI_Action action_ = global::EUI_Action.PointerEnter;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::EUI_Action Action {
    get { return action_; }
    set {
      action_ = value;
    }
  }

  /// <summary>Field number for the "loggedTimestamp" field.</summary>
  public const int LoggedTimestampFieldNumber = 3;
  private global::Timestamp loggedTimestamp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Timestamp LoggedTimestamp {
    get { return loggedTimestamp_; }
    set {
      loggedTimestamp_ = value;
    }
  }

  /// <summary>Field number for the "message" field.</summary>
  public const int MessageFieldNumber = 4;
  private string message_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Message {
    get { return message_; }
    set {
      message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as UI_Interaction);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(UI_Interaction other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Name != other.Name) return false;
    if (Action != other.Action) return false;
    if (!object.Equals(LoggedTimestamp, other.LoggedTimestamp)) return false;
    if (Message != other.Message) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (Action != global::EUI_Action.PointerEnter) hash ^= Action.GetHashCode();
    if (loggedTimestamp_ != null) hash ^= LoggedTimestamp.GetHashCode();
    if (Message.Length != 0) hash ^= Message.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (Name.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Name);
    }
    if (Action != global::EUI_Action.PointerEnter) {
      output.WriteRawTag(16);
      output.WriteEnum((int) Action);
    }
    if (loggedTimestamp_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(LoggedTimestamp);
    }
    if (Message.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Message);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (Name.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Name);
    }
    if (Action != global::EUI_Action.PointerEnter) {
      output.WriteRawTag(16);
      output.WriteEnum((int) Action);
    }
    if (loggedTimestamp_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(LoggedTimestamp);
    }
    if (Message.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Message);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (Action != global::EUI_Action.PointerEnter) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Action);
    }
    if (loggedTimestamp_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(LoggedTimestamp);
    }
    if (Message.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(UI_Interaction other) {
    if (other == null) {
      return;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.Action != global::EUI_Action.PointerEnter) {
      Action = other.Action;
    }
    if (other.loggedTimestamp_ != null) {
      if (loggedTimestamp_ == null) {
        LoggedTimestamp = new global::Timestamp();
      }
      LoggedTimestamp.MergeFrom(other.LoggedTimestamp);
    }
    if (other.Message.Length != 0) {
      Message = other.Message;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Name = input.ReadString();
          break;
        }
        case 16: {
          Action = (global::EUI_Action) input.ReadEnum();
          break;
        }
        case 26: {
          if (loggedTimestamp_ == null) {
            LoggedTimestamp = new global::Timestamp();
          }
          input.ReadMessage(LoggedTimestamp);
          break;
        }
        case 34: {
          Message = input.ReadString();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          Name = input.ReadString();
          break;
        }
        case 16: {
          Action = (global::EUI_Action) input.ReadEnum();
          break;
        }
        case 26: {
          if (loggedTimestamp_ == null) {
            LoggedTimestamp = new global::Timestamp();
          }
          input.ReadMessage(LoggedTimestamp);
          break;
        }
        case 34: {
          Message = input.ReadString();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class TimeLog : pb::IMessage<TimeLog>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<TimeLog> _parser = new pb::MessageParser<TimeLog>(() => new TimeLog());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TimeLog> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AnalyticsDataReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TimeLog() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TimeLog(TimeLog other) : this() {
    name_ = other.name_;
    type_ = other.type_;
    loggedTimestamp_ = other.loggedTimestamp_ != null ? other.loggedTimestamp_.Clone() : null;
    message_ = other.message_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TimeLog Clone() {
    return new TimeLog(this);
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 1;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 2;
  private global::ELogType type_ = global::ELogType.Page;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ELogType Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "loggedTimestamp" field.</summary>
  public const int LoggedTimestampFieldNumber = 3;
  private global::Timestamp loggedTimestamp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Timestamp LoggedTimestamp {
    get { return loggedTimestamp_; }
    set {
      loggedTimestamp_ = value;
    }
  }

  /// <summary>Field number for the "message" field.</summary>
  public const int MessageFieldNumber = 4;
  private string message_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Message {
    get { return message_; }
    set {
      message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TimeLog);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TimeLog other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Name != other.Name) return false;
    if (Type != other.Type) return false;
    if (!object.Equals(LoggedTimestamp, other.LoggedTimestamp)) return false;
    if (Message != other.Message) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (Type != global::ELogType.Page) hash ^= Type.GetHashCode();
    if (loggedTimestamp_ != null) hash ^= LoggedTimestamp.GetHashCode();
    if (Message.Length != 0) hash ^= Message.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (Name.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Name);
    }
    if (Type != global::ELogType.Page) {
      output.WriteRawTag(16);
      output.WriteEnum((int) Type);
    }
    if (loggedTimestamp_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(LoggedTimestamp);
    }
    if (Message.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Message);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (Name.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Name);
    }
    if (Type != global::ELogType.Page) {
      output.WriteRawTag(16);
      output.WriteEnum((int) Type);
    }
    if (loggedTimestamp_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(LoggedTimestamp);
    }
    if (Message.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Message);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (Type != global::ELogType.Page) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
    }
    if (loggedTimestamp_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(LoggedTimestamp);
    }
    if (Message.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TimeLog other) {
    if (other == null) {
      return;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.Type != global::ELogType.Page) {
      Type = other.Type;
    }
    if (other.loggedTimestamp_ != null) {
      if (loggedTimestamp_ == null) {
        LoggedTimestamp = new global::Timestamp();
      }
      LoggedTimestamp.MergeFrom(other.LoggedTimestamp);
    }
    if (other.Message.Length != 0) {
      Message = other.Message;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Name = input.ReadString();
          break;
        }
        case 16: {
          Type = (global::ELogType) input.ReadEnum();
          break;
        }
        case 26: {
          if (loggedTimestamp_ == null) {
            LoggedTimestamp = new global::Timestamp();
          }
          input.ReadMessage(LoggedTimestamp);
          break;
        }
        case 34: {
          Message = input.ReadString();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          Name = input.ReadString();
          break;
        }
        case 16: {
          Type = (global::ELogType) input.ReadEnum();
          break;
        }
        case 26: {
          if (loggedTimestamp_ == null) {
            LoggedTimestamp = new global::Timestamp();
          }
          input.ReadMessage(LoggedTimestamp);
          break;
        }
        case 34: {
          Message = input.ReadString();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class MachineSpec : pb::IMessage<MachineSpec>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<MachineSpec> _parser = new pb::MessageParser<MachineSpec>(() => new MachineSpec());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MachineSpec> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AnalyticsDataReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MachineSpec() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MachineSpec(MachineSpec other) : this() {
    deviceModel_ = other.deviceModel_;
    deviceName_ = other.deviceName_;
    deviceType_ = other.deviceType_;
    deviceUID_ = other.deviceUID_;
    gpuID_ = other.gpuID_;
    gpuName_ = other.gpuName_;
    gpuType_ = other.gpuType_;
    gpuVendor_ = other.gpuVendor_;
    gpuVendorID_ = other.gpuVendorID_;
    gpuVersion_ = other.gpuVersion_;
    gpuMemoryMb_ = other.gpuMemoryMb_;
    gpuMultithread_ = other.gpuMultithread_;
    gpuShaderLvl_ = other.gpuShaderLvl_;
    maxCubemapSize_ = other.maxCubemapSize_;
    maxTextureSize_ = other.maxTextureSize_;
    os_ = other.os_;
    osFamily_ = other.osFamily_;
    processorName_ = other.processorName_;
    processorCount_ = other.processorCount_;
    processorFrequency_ = other.processorFrequency_;
    batteryLvl_ = other.batteryLvl_;
    batteryStatus_ = other.batteryStatus_;
    systemMemorySizeMb_ = other.systemMemorySizeMb_;
    supportedRandomWriteTargetCount_ = other.supportedRandomWriteTargetCount_;
    supportedRenderTargetCount_ = other.supportedRenderTargetCount_;
    supports2DArrayTexture_ = other.supports2DArrayTexture_;
    supports32BitsIndexBuffer_ = other.supports32BitsIndexBuffer_;
    supports3DRenderTextures_ = other.supports3DRenderTextures_;
    supports3DTextures_ = other.supports3DTextures_;
    supportsAsyncCompute_ = other.supportsAsyncCompute_;
    supportsAsyncGPUReadback_ = other.supportsAsyncGPUReadback_;
    supportsComputeShader_ = other.supportsComputeShader_;
    supportsCubemapArrayTextures_ = other.supportsCubemapArrayTextures_;
    supportsGeometryShaders_ = other.supportsGeometryShaders_;
    supportsGraphicFence_ = other.supportsGraphicFence_;
    supportsHardwareQuadTopology_ = other.supportsHardwareQuadTopology_;
    supportsGPUDrawCallInstancing_ = other.supportsGPUDrawCallInstancing_;
    supportsLocationService_ = other.supportsLocationService_;
    supportsMipStreaming_ = other.supportsMipStreaming_;
    supportsMotionVector_ = other.supportsMotionVector_;
    supportsMultisampleAutoResolve_ = other.supportsMultisampleAutoResolve_;
    supportsMultisampledTextures_ = other.supportsMultisampledTextures_;
    supportsSeparatedRenderTargetsBlend_ = other.supportsSeparatedRenderTargetsBlend_;
    supportsSetConstantBuffer_ = other.supportsSetConstantBuffer_;
    supportsSparseTextures_ = other.supportsSparseTextures_;
    supportsTessellationShaders_ = other.supportsTessellationShaders_;
    supportsTextureWrapMirrorOnce_ = other.supportsTextureWrapMirrorOnce_;
    screenWidth_ = other.screenWidth_;
    screenHeight_ = other.screenHeight_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MachineSpec Clone() {
    return new MachineSpec(this);
  }

  /// <summary>Field number for the "deviceModel" field.</summary>
  public const int DeviceModelFieldNumber = 1;
  private string deviceModel_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DeviceModel {
    get { return deviceModel_; }
    set {
      deviceModel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "deviceName" field.</summary>
  public const int DeviceNameFieldNumber = 2;
  private string deviceName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DeviceName {
    get { return deviceName_; }
    set {
      deviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "deviceType" field.</summary>
  public const int DeviceTypeFieldNumber = 3;
  private uint deviceType_;
  /// <summary>
  /// enum
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint DeviceType {
    get { return deviceType_; }
    set {
      deviceType_ = value;
    }
  }

  /// <summary>Field number for the "deviceUID" field.</summary>
  public const int DeviceUIDFieldNumber = 4;
  private string deviceUID_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DeviceUID {
    get { return deviceUID_; }
    set {
      deviceUID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "gpuID" field.</summary>
  public const int GpuIDFieldNumber = 5;
  private int gpuID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GpuID {
    get { return gpuID_; }
    set {
      gpuID_ = value;
    }
  }

  /// <summary>Field number for the "gpuName" field.</summary>
  public const int GpuNameFieldNumber = 6;
  private string gpuName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string GpuName {
    get { return gpuName_; }
    set {
      gpuName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "gpuType" field.</summary>
  public const int GpuTypeFieldNumber = 7;
  private uint gpuType_;
  /// <summary>
  /// enum
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint GpuType {
    get { return gpuType_; }
    set {
      gpuType_ = value;
    }
  }

  /// <summary>Field number for the "gpuVendor" field.</summary>
  public const int GpuVendorFieldNumber = 8;
  private string gpuVendor_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string GpuVendor {
    get { return gpuVendor_; }
    set {
      gpuVendor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "gpuVendorID" field.</summary>
  public const int GpuVendorIDFieldNumber = 9;
  private int gpuVendorID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GpuVendorID {
    get { return gpuVendorID_; }
    set {
      gpuVendorID_ = value;
    }
  }

  /// <summary>Field number for the "gpuVersion" field.</summary>
  public const int GpuVersionFieldNumber = 10;
  private string gpuVersion_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string GpuVersion {
    get { return gpuVersion_; }
    set {
      gpuVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "gpuMemory_mb" field.</summary>
  public const int GpuMemoryMbFieldNumber = 11;
  private int gpuMemoryMb_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GpuMemoryMb {
    get { return gpuMemoryMb_; }
    set {
      gpuMemoryMb_ = value;
    }
  }

  /// <summary>Field number for the "gpuMultithread" field.</summary>
  public const int GpuMultithreadFieldNumber = 12;
  private bool gpuMultithread_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool GpuMultithread {
    get { return gpuMultithread_; }
    set {
      gpuMultithread_ = value;
    }
  }

  /// <summary>Field number for the "gpuShaderLvl" field.</summary>
  public const int GpuShaderLvlFieldNumber = 13;
  private int gpuShaderLvl_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GpuShaderLvl {
    get { return gpuShaderLvl_; }
    set {
      gpuShaderLvl_ = value;
    }
  }

  /// <summary>Field number for the "maxCubemapSize" field.</summary>
  public const int MaxCubemapSizeFieldNumber = 14;
  private int maxCubemapSize_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MaxCubemapSize {
    get { return maxCubemapSize_; }
    set {
      maxCubemapSize_ = value;
    }
  }

  /// <summary>Field number for the "maxTextureSize" field.</summary>
  public const int MaxTextureSizeFieldNumber = 15;
  private int maxTextureSize_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MaxTextureSize {
    get { return maxTextureSize_; }
    set {
      maxTextureSize_ = value;
    }
  }

  /// <summary>Field number for the "os" field.</summary>
  public const int OsFieldNumber = 16;
  private string os_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Os {
    get { return os_; }
    set {
      os_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "osFamily" field.</summary>
  public const int OsFamilyFieldNumber = 17;
  private uint osFamily_;
  /// <summary>
  /// enum
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint OsFamily {
    get { return osFamily_; }
    set {
      osFamily_ = value;
    }
  }

  /// <summary>Field number for the "processorName" field.</summary>
  public const int ProcessorNameFieldNumber = 18;
  private string processorName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ProcessorName {
    get { return processorName_; }
    set {
      processorName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "processorCount" field.</summary>
  public const int ProcessorCountFieldNumber = 19;
  private int processorCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ProcessorCount {
    get { return processorCount_; }
    set {
      processorCount_ = value;
    }
  }

  /// <summary>Field number for the "processorFrequency" field.</summary>
  public const int ProcessorFrequencyFieldNumber = 20;
  private int processorFrequency_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ProcessorFrequency {
    get { return processorFrequency_; }
    set {
      processorFrequency_ = value;
    }
  }

  /// <summary>Field number for the "batteryLvl" field.</summary>
  public const int BatteryLvlFieldNumber = 21;
  private uint batteryLvl_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint BatteryLvl {
    get { return batteryLvl_; }
    set {
      batteryLvl_ = value;
    }
  }

  /// <summary>Field number for the "batteryStatus" field.</summary>
  public const int BatteryStatusFieldNumber = 22;
  private uint batteryStatus_;
  /// <summary>
  /// enum
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint BatteryStatus {
    get { return batteryStatus_; }
    set {
      batteryStatus_ = value;
    }
  }

  /// <summary>Field number for the "systemMemorySize_mb" field.</summary>
  public const int SystemMemorySizeMbFieldNumber = 23;
  private int systemMemorySizeMb_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SystemMemorySizeMb {
    get { return systemMemorySizeMb_; }
    set {
      systemMemorySizeMb_ = value;
    }
  }

  /// <summary>Field number for the "supportedRandomWriteTargetCount" field.</summary>
  public const int SupportedRandomWriteTargetCountFieldNumber = 24;
  private int supportedRandomWriteTargetCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SupportedRandomWriteTargetCount {
    get { return supportedRandomWriteTargetCount_; }
    set {
      supportedRandomWriteTargetCount_ = value;
    }
  }

  /// <summary>Field number for the "supportedRenderTargetCount" field.</summary>
  public const int SupportedRenderTargetCountFieldNumber = 25;
  private int supportedRenderTargetCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SupportedRenderTargetCount {
    get { return supportedRenderTargetCount_; }
    set {
      supportedRenderTargetCount_ = value;
    }
  }

  /// <summary>Field number for the "supports2DArrayTexture" field.</summary>
  public const int Supports2DArrayTextureFieldNumber = 26;
  private bool supports2DArrayTexture_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Supports2DArrayTexture {
    get { return supports2DArrayTexture_; }
    set {
      supports2DArrayTexture_ = value;
    }
  }

  /// <summary>Field number for the "supports32bitsIndexBuffer" field.</summary>
  public const int Supports32BitsIndexBufferFieldNumber = 27;
  private bool supports32BitsIndexBuffer_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Supports32BitsIndexBuffer {
    get { return supports32BitsIndexBuffer_; }
    set {
      supports32BitsIndexBuffer_ = value;
    }
  }

  /// <summary>Field number for the "supports3DRenderTextures" field.</summary>
  public const int Supports3DRenderTexturesFieldNumber = 28;
  private bool supports3DRenderTextures_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Supports3DRenderTextures {
    get { return supports3DRenderTextures_; }
    set {
      supports3DRenderTextures_ = value;
    }
  }

  /// <summary>Field number for the "supports3DTextures" field.</summary>
  public const int Supports3DTexturesFieldNumber = 29;
  private bool supports3DTextures_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Supports3DTextures {
    get { return supports3DTextures_; }
    set {
      supports3DTextures_ = value;
    }
  }

  /// <summary>Field number for the "supportsAsyncCompute" field.</summary>
  public const int SupportsAsyncComputeFieldNumber = 30;
  private bool supportsAsyncCompute_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool SupportsAsyncCompute {
    get { return supportsAsyncCompute_; }
    set {
      supportsAsyncCompute_ = value;
    }
  }

  /// <summary>Field number for the "supportsAsyncGPUReadback" field.</summary>
  public const int SupportsAsyncGPUReadbackFieldNumber = 31;
  private bool supportsAsyncGPUReadback_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool SupportsAsyncGPUReadback {
    get { return supportsAsyncGPUReadback_; }
    set {
      supportsAsyncGPUReadback_ = value;
    }
  }

  /// <summary>Field number for the "supportsComputeShader" field.</summary>
  public const int SupportsComputeShaderFieldNumber = 32;
  private bool supportsComputeShader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool SupportsComputeShader {
    get { return supportsComputeShader_; }
    set {
      supportsComputeShader_ = value;
    }
  }

  /// <summary>Field number for the "supportsCubemapArrayTextures" field.</summary>
  public const int SupportsCubemapArrayTexturesFieldNumber = 33;
  private bool supportsCubemapArrayTextures_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool SupportsCubemapArrayTextures {
    get { return supportsCubemapArrayTextures_; }
    set {
      supportsCubemapArrayTextures_ = value;
    }
  }

  /// <summary>Field number for the "supportsGeometryShaders" field.</summary>
  public const int SupportsGeometryShadersFieldNumber = 34;
  private bool supportsGeometryShaders_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool SupportsGeometryShaders {
    get { return supportsGeometryShaders_; }
    set {
      supportsGeometryShaders_ = value;
    }
  }

  /// <summary>Field number for the "supportsGraphicFence" field.</summary>
  public const int SupportsGraphicFenceFieldNumber = 35;
  private bool supportsGraphicFence_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool SupportsGraphicFence {
    get { return supportsGraphicFence_; }
    set {
      supportsGraphicFence_ = value;
    }
  }

  /// <summary>Field number for the "supportsHardwareQuadTopology" field.</summary>
  public const int SupportsHardwareQuadTopologyFieldNumber = 36;
  private bool supportsHardwareQuadTopology_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool SupportsHardwareQuadTopology {
    get { return supportsHardwareQuadTopology_; }
    set {
      supportsHardwareQuadTopology_ = value;
    }
  }

  /// <summary>Field number for the "supportsGPUDrawCallInstancing" field.</summary>
  public const int SupportsGPUDrawCallInstancingFieldNumber = 37;
  private bool supportsGPUDrawCallInstancing_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool SupportsGPUDrawCallInstancing {
    get { return supportsGPUDrawCallInstancing_; }
    set {
      supportsGPUDrawCallInstancing_ = value;
    }
  }

  /// <summary>Field number for the "supportsLocationService" field.</summary>
  public const int SupportsLocationServiceFieldNumber = 38;
  private bool supportsLocationService_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool SupportsLocationService {
    get { return supportsLocationService_; }
    set {
      supportsLocationService_ = value;
    }
  }

  /// <summary>Field number for the "supportsMipStreaming" field.</summary>
  public const int SupportsMipStreamingFieldNumber = 39;
  private bool supportsMipStreaming_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool SupportsMipStreaming {
    get { return supportsMipStreaming_; }
    set {
      supportsMipStreaming_ = value;
    }
  }

  /// <summary>Field number for the "supportsMotionVector" field.</summary>
  public const int SupportsMotionVectorFieldNumber = 40;
  private bool supportsMotionVector_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool SupportsMotionVector {
    get { return supportsMotionVector_; }
    set {
      supportsMotionVector_ = value;
    }
  }

  /// <summary>Field number for the "supportsMultisampleAutoResolve" field.</summary>
  public const int SupportsMultisampleAutoResolveFieldNumber = 41;
  private bool supportsMultisampleAutoResolve_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool SupportsMultisampleAutoResolve {
    get { return supportsMultisampleAutoResolve_; }
    set {
      supportsMultisampleAutoResolve_ = value;
    }
  }

  /// <summary>Field number for the "supportsMultisampledTextures" field.</summary>
  public const int SupportsMultisampledTexturesFieldNumber = 42;
  private int supportsMultisampledTextures_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SupportsMultisampledTextures {
    get { return supportsMultisampledTextures_; }
    set {
      supportsMultisampledTextures_ = value;
    }
  }

  /// <summary>Field number for the "supportsSeparatedRenderTargetsBlend" field.</summary>
  public const int SupportsSeparatedRenderTargetsBlendFieldNumber = 43;
  private bool supportsSeparatedRenderTargetsBlend_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool SupportsSeparatedRenderTargetsBlend {
    get { return supportsSeparatedRenderTargetsBlend_; }
    set {
      supportsSeparatedRenderTargetsBlend_ = value;
    }
  }

  /// <summary>Field number for the "supportsSetConstantBuffer" field.</summary>
  public const int SupportsSetConstantBufferFieldNumber = 44;
  private bool supportsSetConstantBuffer_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool SupportsSetConstantBuffer {
    get { return supportsSetConstantBuffer_; }
    set {
      supportsSetConstantBuffer_ = value;
    }
  }

  /// <summary>Field number for the "supportsSparseTextures" field.</summary>
  public const int SupportsSparseTexturesFieldNumber = 45;
  private bool supportsSparseTextures_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool SupportsSparseTextures {
    get { return supportsSparseTextures_; }
    set {
      supportsSparseTextures_ = value;
    }
  }

  /// <summary>Field number for the "supportsTessellationShaders" field.</summary>
  public const int SupportsTessellationShadersFieldNumber = 46;
  private bool supportsTessellationShaders_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool SupportsTessellationShaders {
    get { return supportsTessellationShaders_; }
    set {
      supportsTessellationShaders_ = value;
    }
  }

  /// <summary>Field number for the "supportsTextureWrapMirrorOnce" field.</summary>
  public const int SupportsTextureWrapMirrorOnceFieldNumber = 47;
  private int supportsTextureWrapMirrorOnce_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SupportsTextureWrapMirrorOnce {
    get { return supportsTextureWrapMirrorOnce_; }
    set {
      supportsTextureWrapMirrorOnce_ = value;
    }
  }

  /// <summary>Field number for the "screenWidth" field.</summary>
  public const int ScreenWidthFieldNumber = 48;
  private uint screenWidth_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint ScreenWidth {
    get { return screenWidth_; }
    set {
      screenWidth_ = value;
    }
  }

  /// <summary>Field number for the "screenHeight" field.</summary>
  public const int ScreenHeightFieldNumber = 49;
  private uint screenHeight_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint ScreenHeight {
    get { return screenHeight_; }
    set {
      screenHeight_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MachineSpec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MachineSpec other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DeviceModel != other.DeviceModel) return false;
    if (DeviceName != other.DeviceName) return false;
    if (DeviceType != other.DeviceType) return false;
    if (DeviceUID != other.DeviceUID) return false;
    if (GpuID != other.GpuID) return false;
    if (GpuName != other.GpuName) return false;
    if (GpuType != other.GpuType) return false;
    if (GpuVendor != other.GpuVendor) return false;
    if (GpuVendorID != other.GpuVendorID) return false;
    if (GpuVersion != other.GpuVersion) return false;
    if (GpuMemoryMb != other.GpuMemoryMb) return false;
    if (GpuMultithread != other.GpuMultithread) return false;
    if (GpuShaderLvl != other.GpuShaderLvl) return false;
    if (MaxCubemapSize != other.MaxCubemapSize) return false;
    if (MaxTextureSize != other.MaxTextureSize) return false;
    if (Os != other.Os) return false;
    if (OsFamily != other.OsFamily) return false;
    if (ProcessorName != other.ProcessorName) return false;
    if (ProcessorCount != other.ProcessorCount) return false;
    if (ProcessorFrequency != other.ProcessorFrequency) return false;
    if (BatteryLvl != other.BatteryLvl) return false;
    if (BatteryStatus != other.BatteryStatus) return false;
    if (SystemMemorySizeMb != other.SystemMemorySizeMb) return false;
    if (SupportedRandomWriteTargetCount != other.SupportedRandomWriteTargetCount) return false;
    if (SupportedRenderTargetCount != other.SupportedRenderTargetCount) return false;
    if (Supports2DArrayTexture != other.Supports2DArrayTexture) return false;
    if (Supports32BitsIndexBuffer != other.Supports32BitsIndexBuffer) return false;
    if (Supports3DRenderTextures != other.Supports3DRenderTextures) return false;
    if (Supports3DTextures != other.Supports3DTextures) return false;
    if (SupportsAsyncCompute != other.SupportsAsyncCompute) return false;
    if (SupportsAsyncGPUReadback != other.SupportsAsyncGPUReadback) return false;
    if (SupportsComputeShader != other.SupportsComputeShader) return false;
    if (SupportsCubemapArrayTextures != other.SupportsCubemapArrayTextures) return false;
    if (SupportsGeometryShaders != other.SupportsGeometryShaders) return false;
    if (SupportsGraphicFence != other.SupportsGraphicFence) return false;
    if (SupportsHardwareQuadTopology != other.SupportsHardwareQuadTopology) return false;
    if (SupportsGPUDrawCallInstancing != other.SupportsGPUDrawCallInstancing) return false;
    if (SupportsLocationService != other.SupportsLocationService) return false;
    if (SupportsMipStreaming != other.SupportsMipStreaming) return false;
    if (SupportsMotionVector != other.SupportsMotionVector) return false;
    if (SupportsMultisampleAutoResolve != other.SupportsMultisampleAutoResolve) return false;
    if (SupportsMultisampledTextures != other.SupportsMultisampledTextures) return false;
    if (SupportsSeparatedRenderTargetsBlend != other.SupportsSeparatedRenderTargetsBlend) return false;
    if (SupportsSetConstantBuffer != other.SupportsSetConstantBuffer) return false;
    if (SupportsSparseTextures != other.SupportsSparseTextures) return false;
    if (SupportsTessellationShaders != other.SupportsTessellationShaders) return false;
    if (SupportsTextureWrapMirrorOnce != other.SupportsTextureWrapMirrorOnce) return false;
    if (ScreenWidth != other.ScreenWidth) return false;
    if (ScreenHeight != other.ScreenHeight) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (DeviceModel.Length != 0) hash ^= DeviceModel.GetHashCode();
    if (DeviceName.Length != 0) hash ^= DeviceName.GetHashCode();
    if (DeviceType != 0) hash ^= DeviceType.GetHashCode();
    if (DeviceUID.Length != 0) hash ^= DeviceUID.GetHashCode();
    if (GpuID != 0) hash ^= GpuID.GetHashCode();
    if (GpuName.Length != 0) hash ^= GpuName.GetHashCode();
    if (GpuType != 0) hash ^= GpuType.GetHashCode();
    if (GpuVendor.Length != 0) hash ^= GpuVendor.GetHashCode();
    if (GpuVendorID != 0) hash ^= GpuVendorID.GetHashCode();
    if (GpuVersion.Length != 0) hash ^= GpuVersion.GetHashCode();
    if (GpuMemoryMb != 0) hash ^= GpuMemoryMb.GetHashCode();
    if (GpuMultithread != false) hash ^= GpuMultithread.GetHashCode();
    if (GpuShaderLvl != 0) hash ^= GpuShaderLvl.GetHashCode();
    if (MaxCubemapSize != 0) hash ^= MaxCubemapSize.GetHashCode();
    if (MaxTextureSize != 0) hash ^= MaxTextureSize.GetHashCode();
    if (Os.Length != 0) hash ^= Os.GetHashCode();
    if (OsFamily != 0) hash ^= OsFamily.GetHashCode();
    if (ProcessorName.Length != 0) hash ^= ProcessorName.GetHashCode();
    if (ProcessorCount != 0) hash ^= ProcessorCount.GetHashCode();
    if (ProcessorFrequency != 0) hash ^= ProcessorFrequency.GetHashCode();
    if (BatteryLvl != 0) hash ^= BatteryLvl.GetHashCode();
    if (BatteryStatus != 0) hash ^= BatteryStatus.GetHashCode();
    if (SystemMemorySizeMb != 0) hash ^= SystemMemorySizeMb.GetHashCode();
    if (SupportedRandomWriteTargetCount != 0) hash ^= SupportedRandomWriteTargetCount.GetHashCode();
    if (SupportedRenderTargetCount != 0) hash ^= SupportedRenderTargetCount.GetHashCode();
    if (Supports2DArrayTexture != false) hash ^= Supports2DArrayTexture.GetHashCode();
    if (Supports32BitsIndexBuffer != false) hash ^= Supports32BitsIndexBuffer.GetHashCode();
    if (Supports3DRenderTextures != false) hash ^= Supports3DRenderTextures.GetHashCode();
    if (Supports3DTextures != false) hash ^= Supports3DTextures.GetHashCode();
    if (SupportsAsyncCompute != false) hash ^= SupportsAsyncCompute.GetHashCode();
    if (SupportsAsyncGPUReadback != false) hash ^= SupportsAsyncGPUReadback.GetHashCode();
    if (SupportsComputeShader != false) hash ^= SupportsComputeShader.GetHashCode();
    if (SupportsCubemapArrayTextures != false) hash ^= SupportsCubemapArrayTextures.GetHashCode();
    if (SupportsGeometryShaders != false) hash ^= SupportsGeometryShaders.GetHashCode();
    if (SupportsGraphicFence != false) hash ^= SupportsGraphicFence.GetHashCode();
    if (SupportsHardwareQuadTopology != false) hash ^= SupportsHardwareQuadTopology.GetHashCode();
    if (SupportsGPUDrawCallInstancing != false) hash ^= SupportsGPUDrawCallInstancing.GetHashCode();
    if (SupportsLocationService != false) hash ^= SupportsLocationService.GetHashCode();
    if (SupportsMipStreaming != false) hash ^= SupportsMipStreaming.GetHashCode();
    if (SupportsMotionVector != false) hash ^= SupportsMotionVector.GetHashCode();
    if (SupportsMultisampleAutoResolve != false) hash ^= SupportsMultisampleAutoResolve.GetHashCode();
    if (SupportsMultisampledTextures != 0) hash ^= SupportsMultisampledTextures.GetHashCode();
    if (SupportsSeparatedRenderTargetsBlend != false) hash ^= SupportsSeparatedRenderTargetsBlend.GetHashCode();
    if (SupportsSetConstantBuffer != false) hash ^= SupportsSetConstantBuffer.GetHashCode();
    if (SupportsSparseTextures != false) hash ^= SupportsSparseTextures.GetHashCode();
    if (SupportsTessellationShaders != false) hash ^= SupportsTessellationShaders.GetHashCode();
    if (SupportsTextureWrapMirrorOnce != 0) hash ^= SupportsTextureWrapMirrorOnce.GetHashCode();
    if (ScreenWidth != 0) hash ^= ScreenWidth.GetHashCode();
    if (ScreenHeight != 0) hash ^= ScreenHeight.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (DeviceModel.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(DeviceModel);
    }
    if (DeviceName.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(DeviceName);
    }
    if (DeviceType != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(DeviceType);
    }
    if (DeviceUID.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(DeviceUID);
    }
    if (GpuID != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(GpuID);
    }
    if (GpuName.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(GpuName);
    }
    if (GpuType != 0) {
      output.WriteRawTag(56);
      output.WriteUInt32(GpuType);
    }
    if (GpuVendor.Length != 0) {
      output.WriteRawTag(66);
      output.WriteString(GpuVendor);
    }
    if (GpuVendorID != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(GpuVendorID);
    }
    if (GpuVersion.Length != 0) {
      output.WriteRawTag(82);
      output.WriteString(GpuVersion);
    }
    if (GpuMemoryMb != 0) {
      output.WriteRawTag(88);
      output.WriteInt32(GpuMemoryMb);
    }
    if (GpuMultithread != false) {
      output.WriteRawTag(96);
      output.WriteBool(GpuMultithread);
    }
    if (GpuShaderLvl != 0) {
      output.WriteRawTag(104);
      output.WriteInt32(GpuShaderLvl);
    }
    if (MaxCubemapSize != 0) {
      output.WriteRawTag(112);
      output.WriteInt32(MaxCubemapSize);
    }
    if (MaxTextureSize != 0) {
      output.WriteRawTag(120);
      output.WriteInt32(MaxTextureSize);
    }
    if (Os.Length != 0) {
      output.WriteRawTag(130, 1);
      output.WriteString(Os);
    }
    if (OsFamily != 0) {
      output.WriteRawTag(136, 1);
      output.WriteUInt32(OsFamily);
    }
    if (ProcessorName.Length != 0) {
      output.WriteRawTag(146, 1);
      output.WriteString(ProcessorName);
    }
    if (ProcessorCount != 0) {
      output.WriteRawTag(152, 1);
      output.WriteInt32(ProcessorCount);
    }
    if (ProcessorFrequency != 0) {
      output.WriteRawTag(160, 1);
      output.WriteInt32(ProcessorFrequency);
    }
    if (BatteryLvl != 0) {
      output.WriteRawTag(168, 1);
      output.WriteUInt32(BatteryLvl);
    }
    if (BatteryStatus != 0) {
      output.WriteRawTag(176, 1);
      output.WriteUInt32(BatteryStatus);
    }
    if (SystemMemorySizeMb != 0) {
      output.WriteRawTag(184, 1);
      output.WriteInt32(SystemMemorySizeMb);
    }
    if (SupportedRandomWriteTargetCount != 0) {
      output.WriteRawTag(192, 1);
      output.WriteInt32(SupportedRandomWriteTargetCount);
    }
    if (SupportedRenderTargetCount != 0) {
      output.WriteRawTag(200, 1);
      output.WriteInt32(SupportedRenderTargetCount);
    }
    if (Supports2DArrayTexture != false) {
      output.WriteRawTag(208, 1);
      output.WriteBool(Supports2DArrayTexture);
    }
    if (Supports32BitsIndexBuffer != false) {
      output.WriteRawTag(216, 1);
      output.WriteBool(Supports32BitsIndexBuffer);
    }
    if (Supports3DRenderTextures != false) {
      output.WriteRawTag(224, 1);
      output.WriteBool(Supports3DRenderTextures);
    }
    if (Supports3DTextures != false) {
      output.WriteRawTag(232, 1);
      output.WriteBool(Supports3DTextures);
    }
    if (SupportsAsyncCompute != false) {
      output.WriteRawTag(240, 1);
      output.WriteBool(SupportsAsyncCompute);
    }
    if (SupportsAsyncGPUReadback != false) {
      output.WriteRawTag(248, 1);
      output.WriteBool(SupportsAsyncGPUReadback);
    }
    if (SupportsComputeShader != false) {
      output.WriteRawTag(128, 2);
      output.WriteBool(SupportsComputeShader);
    }
    if (SupportsCubemapArrayTextures != false) {
      output.WriteRawTag(136, 2);
      output.WriteBool(SupportsCubemapArrayTextures);
    }
    if (SupportsGeometryShaders != false) {
      output.WriteRawTag(144, 2);
      output.WriteBool(SupportsGeometryShaders);
    }
    if (SupportsGraphicFence != false) {
      output.WriteRawTag(152, 2);
      output.WriteBool(SupportsGraphicFence);
    }
    if (SupportsHardwareQuadTopology != false) {
      output.WriteRawTag(160, 2);
      output.WriteBool(SupportsHardwareQuadTopology);
    }
    if (SupportsGPUDrawCallInstancing != false) {
      output.WriteRawTag(168, 2);
      output.WriteBool(SupportsGPUDrawCallInstancing);
    }
    if (SupportsLocationService != false) {
      output.WriteRawTag(176, 2);
      output.WriteBool(SupportsLocationService);
    }
    if (SupportsMipStreaming != false) {
      output.WriteRawTag(184, 2);
      output.WriteBool(SupportsMipStreaming);
    }
    if (SupportsMotionVector != false) {
      output.WriteRawTag(192, 2);
      output.WriteBool(SupportsMotionVector);
    }
    if (SupportsMultisampleAutoResolve != false) {
      output.WriteRawTag(200, 2);
      output.WriteBool(SupportsMultisampleAutoResolve);
    }
    if (SupportsMultisampledTextures != 0) {
      output.WriteRawTag(208, 2);
      output.WriteInt32(SupportsMultisampledTextures);
    }
    if (SupportsSeparatedRenderTargetsBlend != false) {
      output.WriteRawTag(216, 2);
      output.WriteBool(SupportsSeparatedRenderTargetsBlend);
    }
    if (SupportsSetConstantBuffer != false) {
      output.WriteRawTag(224, 2);
      output.WriteBool(SupportsSetConstantBuffer);
    }
    if (SupportsSparseTextures != false) {
      output.WriteRawTag(232, 2);
      output.WriteBool(SupportsSparseTextures);
    }
    if (SupportsTessellationShaders != false) {
      output.WriteRawTag(240, 2);
      output.WriteBool(SupportsTessellationShaders);
    }
    if (SupportsTextureWrapMirrorOnce != 0) {
      output.WriteRawTag(248, 2);
      output.WriteInt32(SupportsTextureWrapMirrorOnce);
    }
    if (ScreenWidth != 0) {
      output.WriteRawTag(128, 3);
      output.WriteUInt32(ScreenWidth);
    }
    if (ScreenHeight != 0) {
      output.WriteRawTag(136, 3);
      output.WriteUInt32(ScreenHeight);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (DeviceModel.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(DeviceModel);
    }
    if (DeviceName.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(DeviceName);
    }
    if (DeviceType != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(DeviceType);
    }
    if (DeviceUID.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(DeviceUID);
    }
    if (GpuID != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(GpuID);
    }
    if (GpuName.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(GpuName);
    }
    if (GpuType != 0) {
      output.WriteRawTag(56);
      output.WriteUInt32(GpuType);
    }
    if (GpuVendor.Length != 0) {
      output.WriteRawTag(66);
      output.WriteString(GpuVendor);
    }
    if (GpuVendorID != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(GpuVendorID);
    }
    if (GpuVersion.Length != 0) {
      output.WriteRawTag(82);
      output.WriteString(GpuVersion);
    }
    if (GpuMemoryMb != 0) {
      output.WriteRawTag(88);
      output.WriteInt32(GpuMemoryMb);
    }
    if (GpuMultithread != false) {
      output.WriteRawTag(96);
      output.WriteBool(GpuMultithread);
    }
    if (GpuShaderLvl != 0) {
      output.WriteRawTag(104);
      output.WriteInt32(GpuShaderLvl);
    }
    if (MaxCubemapSize != 0) {
      output.WriteRawTag(112);
      output.WriteInt32(MaxCubemapSize);
    }
    if (MaxTextureSize != 0) {
      output.WriteRawTag(120);
      output.WriteInt32(MaxTextureSize);
    }
    if (Os.Length != 0) {
      output.WriteRawTag(130, 1);
      output.WriteString(Os);
    }
    if (OsFamily != 0) {
      output.WriteRawTag(136, 1);
      output.WriteUInt32(OsFamily);
    }
    if (ProcessorName.Length != 0) {
      output.WriteRawTag(146, 1);
      output.WriteString(ProcessorName);
    }
    if (ProcessorCount != 0) {
      output.WriteRawTag(152, 1);
      output.WriteInt32(ProcessorCount);
    }
    if (ProcessorFrequency != 0) {
      output.WriteRawTag(160, 1);
      output.WriteInt32(ProcessorFrequency);
    }
    if (BatteryLvl != 0) {
      output.WriteRawTag(168, 1);
      output.WriteUInt32(BatteryLvl);
    }
    if (BatteryStatus != 0) {
      output.WriteRawTag(176, 1);
      output.WriteUInt32(BatteryStatus);
    }
    if (SystemMemorySizeMb != 0) {
      output.WriteRawTag(184, 1);
      output.WriteInt32(SystemMemorySizeMb);
    }
    if (SupportedRandomWriteTargetCount != 0) {
      output.WriteRawTag(192, 1);
      output.WriteInt32(SupportedRandomWriteTargetCount);
    }
    if (SupportedRenderTargetCount != 0) {
      output.WriteRawTag(200, 1);
      output.WriteInt32(SupportedRenderTargetCount);
    }
    if (Supports2DArrayTexture != false) {
      output.WriteRawTag(208, 1);
      output.WriteBool(Supports2DArrayTexture);
    }
    if (Supports32BitsIndexBuffer != false) {
      output.WriteRawTag(216, 1);
      output.WriteBool(Supports32BitsIndexBuffer);
    }
    if (Supports3DRenderTextures != false) {
      output.WriteRawTag(224, 1);
      output.WriteBool(Supports3DRenderTextures);
    }
    if (Supports3DTextures != false) {
      output.WriteRawTag(232, 1);
      output.WriteBool(Supports3DTextures);
    }
    if (SupportsAsyncCompute != false) {
      output.WriteRawTag(240, 1);
      output.WriteBool(SupportsAsyncCompute);
    }
    if (SupportsAsyncGPUReadback != false) {
      output.WriteRawTag(248, 1);
      output.WriteBool(SupportsAsyncGPUReadback);
    }
    if (SupportsComputeShader != false) {
      output.WriteRawTag(128, 2);
      output.WriteBool(SupportsComputeShader);
    }
    if (SupportsCubemapArrayTextures != false) {
      output.WriteRawTag(136, 2);
      output.WriteBool(SupportsCubemapArrayTextures);
    }
    if (SupportsGeometryShaders != false) {
      output.WriteRawTag(144, 2);
      output.WriteBool(SupportsGeometryShaders);
    }
    if (SupportsGraphicFence != false) {
      output.WriteRawTag(152, 2);
      output.WriteBool(SupportsGraphicFence);
    }
    if (SupportsHardwareQuadTopology != false) {
      output.WriteRawTag(160, 2);
      output.WriteBool(SupportsHardwareQuadTopology);
    }
    if (SupportsGPUDrawCallInstancing != false) {
      output.WriteRawTag(168, 2);
      output.WriteBool(SupportsGPUDrawCallInstancing);
    }
    if (SupportsLocationService != false) {
      output.WriteRawTag(176, 2);
      output.WriteBool(SupportsLocationService);
    }
    if (SupportsMipStreaming != false) {
      output.WriteRawTag(184, 2);
      output.WriteBool(SupportsMipStreaming);
    }
    if (SupportsMotionVector != false) {
      output.WriteRawTag(192, 2);
      output.WriteBool(SupportsMotionVector);
    }
    if (SupportsMultisampleAutoResolve != false) {
      output.WriteRawTag(200, 2);
      output.WriteBool(SupportsMultisampleAutoResolve);
    }
    if (SupportsMultisampledTextures != 0) {
      output.WriteRawTag(208, 2);
      output.WriteInt32(SupportsMultisampledTextures);
    }
    if (SupportsSeparatedRenderTargetsBlend != false) {
      output.WriteRawTag(216, 2);
      output.WriteBool(SupportsSeparatedRenderTargetsBlend);
    }
    if (SupportsSetConstantBuffer != false) {
      output.WriteRawTag(224, 2);
      output.WriteBool(SupportsSetConstantBuffer);
    }
    if (SupportsSparseTextures != false) {
      output.WriteRawTag(232, 2);
      output.WriteBool(SupportsSparseTextures);
    }
    if (SupportsTessellationShaders != false) {
      output.WriteRawTag(240, 2);
      output.WriteBool(SupportsTessellationShaders);
    }
    if (SupportsTextureWrapMirrorOnce != 0) {
      output.WriteRawTag(248, 2);
      output.WriteInt32(SupportsTextureWrapMirrorOnce);
    }
    if (ScreenWidth != 0) {
      output.WriteRawTag(128, 3);
      output.WriteUInt32(ScreenWidth);
    }
    if (ScreenHeight != 0) {
      output.WriteRawTag(136, 3);
      output.WriteUInt32(ScreenHeight);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (DeviceModel.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceModel);
    }
    if (DeviceName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceName);
    }
    if (DeviceType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DeviceType);
    }
    if (DeviceUID.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceUID);
    }
    if (GpuID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GpuID);
    }
    if (GpuName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(GpuName);
    }
    if (GpuType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GpuType);
    }
    if (GpuVendor.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(GpuVendor);
    }
    if (GpuVendorID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GpuVendorID);
    }
    if (GpuVersion.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(GpuVersion);
    }
    if (GpuMemoryMb != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GpuMemoryMb);
    }
    if (GpuMultithread != false) {
      size += 1 + 1;
    }
    if (GpuShaderLvl != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GpuShaderLvl);
    }
    if (MaxCubemapSize != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxCubemapSize);
    }
    if (MaxTextureSize != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxTextureSize);
    }
    if (Os.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(Os);
    }
    if (OsFamily != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(OsFamily);
    }
    if (ProcessorName.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(ProcessorName);
    }
    if (ProcessorCount != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(ProcessorCount);
    }
    if (ProcessorFrequency != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(ProcessorFrequency);
    }
    if (BatteryLvl != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BatteryLvl);
    }
    if (BatteryStatus != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BatteryStatus);
    }
    if (SystemMemorySizeMb != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(SystemMemorySizeMb);
    }
    if (SupportedRandomWriteTargetCount != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(SupportedRandomWriteTargetCount);
    }
    if (SupportedRenderTargetCount != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(SupportedRenderTargetCount);
    }
    if (Supports2DArrayTexture != false) {
      size += 2 + 1;
    }
    if (Supports32BitsIndexBuffer != false) {
      size += 2 + 1;
    }
    if (Supports3DRenderTextures != false) {
      size += 2 + 1;
    }
    if (Supports3DTextures != false) {
      size += 2 + 1;
    }
    if (SupportsAsyncCompute != false) {
      size += 2 + 1;
    }
    if (SupportsAsyncGPUReadback != false) {
      size += 2 + 1;
    }
    if (SupportsComputeShader != false) {
      size += 2 + 1;
    }
    if (SupportsCubemapArrayTextures != false) {
      size += 2 + 1;
    }
    if (SupportsGeometryShaders != false) {
      size += 2 + 1;
    }
    if (SupportsGraphicFence != false) {
      size += 2 + 1;
    }
    if (SupportsHardwareQuadTopology != false) {
      size += 2 + 1;
    }
    if (SupportsGPUDrawCallInstancing != false) {
      size += 2 + 1;
    }
    if (SupportsLocationService != false) {
      size += 2 + 1;
    }
    if (SupportsMipStreaming != false) {
      size += 2 + 1;
    }
    if (SupportsMotionVector != false) {
      size += 2 + 1;
    }
    if (SupportsMultisampleAutoResolve != false) {
      size += 2 + 1;
    }
    if (SupportsMultisampledTextures != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(SupportsMultisampledTextures);
    }
    if (SupportsSeparatedRenderTargetsBlend != false) {
      size += 2 + 1;
    }
    if (SupportsSetConstantBuffer != false) {
      size += 2 + 1;
    }
    if (SupportsSparseTextures != false) {
      size += 2 + 1;
    }
    if (SupportsTessellationShaders != false) {
      size += 2 + 1;
    }
    if (SupportsTextureWrapMirrorOnce != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(SupportsTextureWrapMirrorOnce);
    }
    if (ScreenWidth != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ScreenWidth);
    }
    if (ScreenHeight != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ScreenHeight);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MachineSpec other) {
    if (other == null) {
      return;
    }
    if (other.DeviceModel.Length != 0) {
      DeviceModel = other.DeviceModel;
    }
    if (other.DeviceName.Length != 0) {
      DeviceName = other.DeviceName;
    }
    if (other.DeviceType != 0) {
      DeviceType = other.DeviceType;
    }
    if (other.DeviceUID.Length != 0) {
      DeviceUID = other.DeviceUID;
    }
    if (other.GpuID != 0) {
      GpuID = other.GpuID;
    }
    if (other.GpuName.Length != 0) {
      GpuName = other.GpuName;
    }
    if (other.GpuType != 0) {
      GpuType = other.GpuType;
    }
    if (other.GpuVendor.Length != 0) {
      GpuVendor = other.GpuVendor;
    }
    if (other.GpuVendorID != 0) {
      GpuVendorID = other.GpuVendorID;
    }
    if (other.GpuVersion.Length != 0) {
      GpuVersion = other.GpuVersion;
    }
    if (other.GpuMemoryMb != 0) {
      GpuMemoryMb = other.GpuMemoryMb;
    }
    if (other.GpuMultithread != false) {
      GpuMultithread = other.GpuMultithread;
    }
    if (other.GpuShaderLvl != 0) {
      GpuShaderLvl = other.GpuShaderLvl;
    }
    if (other.MaxCubemapSize != 0) {
      MaxCubemapSize = other.MaxCubemapSize;
    }
    if (other.MaxTextureSize != 0) {
      MaxTextureSize = other.MaxTextureSize;
    }
    if (other.Os.Length != 0) {
      Os = other.Os;
    }
    if (other.OsFamily != 0) {
      OsFamily = other.OsFamily;
    }
    if (other.ProcessorName.Length != 0) {
      ProcessorName = other.ProcessorName;
    }
    if (other.ProcessorCount != 0) {
      ProcessorCount = other.ProcessorCount;
    }
    if (other.ProcessorFrequency != 0) {
      ProcessorFrequency = other.ProcessorFrequency;
    }
    if (other.BatteryLvl != 0) {
      BatteryLvl = other.BatteryLvl;
    }
    if (other.BatteryStatus != 0) {
      BatteryStatus = other.BatteryStatus;
    }
    if (other.SystemMemorySizeMb != 0) {
      SystemMemorySizeMb = other.SystemMemorySizeMb;
    }
    if (other.SupportedRandomWriteTargetCount != 0) {
      SupportedRandomWriteTargetCount = other.SupportedRandomWriteTargetCount;
    }
    if (other.SupportedRenderTargetCount != 0) {
      SupportedRenderTargetCount = other.SupportedRenderTargetCount;
    }
    if (other.Supports2DArrayTexture != false) {
      Supports2DArrayTexture = other.Supports2DArrayTexture;
    }
    if (other.Supports32BitsIndexBuffer != false) {
      Supports32BitsIndexBuffer = other.Supports32BitsIndexBuffer;
    }
    if (other.Supports3DRenderTextures != false) {
      Supports3DRenderTextures = other.Supports3DRenderTextures;
    }
    if (other.Supports3DTextures != false) {
      Supports3DTextures = other.Supports3DTextures;
    }
    if (other.SupportsAsyncCompute != false) {
      SupportsAsyncCompute = other.SupportsAsyncCompute;
    }
    if (other.SupportsAsyncGPUReadback != false) {
      SupportsAsyncGPUReadback = other.SupportsAsyncGPUReadback;
    }
    if (other.SupportsComputeShader != false) {
      SupportsComputeShader = other.SupportsComputeShader;
    }
    if (other.SupportsCubemapArrayTextures != false) {
      SupportsCubemapArrayTextures = other.SupportsCubemapArrayTextures;
    }
    if (other.SupportsGeometryShaders != false) {
      SupportsGeometryShaders = other.SupportsGeometryShaders;
    }
    if (other.SupportsGraphicFence != false) {
      SupportsGraphicFence = other.SupportsGraphicFence;
    }
    if (other.SupportsHardwareQuadTopology != false) {
      SupportsHardwareQuadTopology = other.SupportsHardwareQuadTopology;
    }
    if (other.SupportsGPUDrawCallInstancing != false) {
      SupportsGPUDrawCallInstancing = other.SupportsGPUDrawCallInstancing;
    }
    if (other.SupportsLocationService != false) {
      SupportsLocationService = other.SupportsLocationService;
    }
    if (other.SupportsMipStreaming != false) {
      SupportsMipStreaming = other.SupportsMipStreaming;
    }
    if (other.SupportsMotionVector != false) {
      SupportsMotionVector = other.SupportsMotionVector;
    }
    if (other.SupportsMultisampleAutoResolve != false) {
      SupportsMultisampleAutoResolve = other.SupportsMultisampleAutoResolve;
    }
    if (other.SupportsMultisampledTextures != 0) {
      SupportsMultisampledTextures = other.SupportsMultisampledTextures;
    }
    if (other.SupportsSeparatedRenderTargetsBlend != false) {
      SupportsSeparatedRenderTargetsBlend = other.SupportsSeparatedRenderTargetsBlend;
    }
    if (other.SupportsSetConstantBuffer != false) {
      SupportsSetConstantBuffer = other.SupportsSetConstantBuffer;
    }
    if (other.SupportsSparseTextures != false) {
      SupportsSparseTextures = other.SupportsSparseTextures;
    }
    if (other.SupportsTessellationShaders != false) {
      SupportsTessellationShaders = other.SupportsTessellationShaders;
    }
    if (other.SupportsTextureWrapMirrorOnce != 0) {
      SupportsTextureWrapMirrorOnce = other.SupportsTextureWrapMirrorOnce;
    }
    if (other.ScreenWidth != 0) {
      ScreenWidth = other.ScreenWidth;
    }
    if (other.ScreenHeight != 0) {
      ScreenHeight = other.ScreenHeight;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          DeviceModel = input.ReadString();
          break;
        }
        case 18: {
          DeviceName = input.ReadString();
          break;
        }
        case 24: {
          DeviceType = input.ReadUInt32();
          break;
        }
        case 34: {
          DeviceUID = input.ReadString();
          break;
        }
        case 40: {
          GpuID = input.ReadInt32();
          break;
        }
        case 50: {
          GpuName = input.ReadString();
          break;
        }
        case 56: {
          GpuType = input.ReadUInt32();
          break;
        }
        case 66: {
          GpuVendor = input.ReadString();
          break;
        }
        case 72: {
          GpuVendorID = input.ReadInt32();
          break;
        }
        case 82: {
          GpuVersion = input.ReadString();
          break;
        }
        case 88: {
          GpuMemoryMb = input.ReadInt32();
          break;
        }
        case 96: {
          GpuMultithread = input.ReadBool();
          break;
        }
        case 104: {
          GpuShaderLvl = input.ReadInt32();
          break;
        }
        case 112: {
          MaxCubemapSize = input.ReadInt32();
          break;
        }
        case 120: {
          MaxTextureSize = input.ReadInt32();
          break;
        }
        case 130: {
          Os = input.ReadString();
          break;
        }
        case 136: {
          OsFamily = input.ReadUInt32();
          break;
        }
        case 146: {
          ProcessorName = input.ReadString();
          break;
        }
        case 152: {
          ProcessorCount = input.ReadInt32();
          break;
        }
        case 160: {
          ProcessorFrequency = input.ReadInt32();
          break;
        }
        case 168: {
          BatteryLvl = input.ReadUInt32();
          break;
        }
        case 176: {
          BatteryStatus = input.ReadUInt32();
          break;
        }
        case 184: {
          SystemMemorySizeMb = input.ReadInt32();
          break;
        }
        case 192: {
          SupportedRandomWriteTargetCount = input.ReadInt32();
          break;
        }
        case 200: {
          SupportedRenderTargetCount = input.ReadInt32();
          break;
        }
        case 208: {
          Supports2DArrayTexture = input.ReadBool();
          break;
        }
        case 216: {
          Supports32BitsIndexBuffer = input.ReadBool();
          break;
        }
        case 224: {
          Supports3DRenderTextures = input.ReadBool();
          break;
        }
        case 232: {
          Supports3DTextures = input.ReadBool();
          break;
        }
        case 240: {
          SupportsAsyncCompute = input.ReadBool();
          break;
        }
        case 248: {
          SupportsAsyncGPUReadback = input.ReadBool();
          break;
        }
        case 256: {
          SupportsComputeShader = input.ReadBool();
          break;
        }
        case 264: {
          SupportsCubemapArrayTextures = input.ReadBool();
          break;
        }
        case 272: {
          SupportsGeometryShaders = input.ReadBool();
          break;
        }
        case 280: {
          SupportsGraphicFence = input.ReadBool();
          break;
        }
        case 288: {
          SupportsHardwareQuadTopology = input.ReadBool();
          break;
        }
        case 296: {
          SupportsGPUDrawCallInstancing = input.ReadBool();
          break;
        }
        case 304: {
          SupportsLocationService = input.ReadBool();
          break;
        }
        case 312: {
          SupportsMipStreaming = input.ReadBool();
          break;
        }
        case 320: {
          SupportsMotionVector = input.ReadBool();
          break;
        }
        case 328: {
          SupportsMultisampleAutoResolve = input.ReadBool();
          break;
        }
        case 336: {
          SupportsMultisampledTextures = input.ReadInt32();
          break;
        }
        case 344: {
          SupportsSeparatedRenderTargetsBlend = input.ReadBool();
          break;
        }
        case 352: {
          SupportsSetConstantBuffer = input.ReadBool();
          break;
        }
        case 360: {
          SupportsSparseTextures = input.ReadBool();
          break;
        }
        case 368: {
          SupportsTessellationShaders = input.ReadBool();
          break;
        }
        case 376: {
          SupportsTextureWrapMirrorOnce = input.ReadInt32();
          break;
        }
        case 384: {
          ScreenWidth = input.ReadUInt32();
          break;
        }
        case 392: {
          ScreenHeight = input.ReadUInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          DeviceModel = input.ReadString();
          break;
        }
        case 18: {
          DeviceName = input.ReadString();
          break;
        }
        case 24: {
          DeviceType = input.ReadUInt32();
          break;
        }
        case 34: {
          DeviceUID = input.ReadString();
          break;
        }
        case 40: {
          GpuID = input.ReadInt32();
          break;
        }
        case 50: {
          GpuName = input.ReadString();
          break;
        }
        case 56: {
          GpuType = input.ReadUInt32();
          break;
        }
        case 66: {
          GpuVendor = input.ReadString();
          break;
        }
        case 72: {
          GpuVendorID = input.ReadInt32();
          break;
        }
        case 82: {
          GpuVersion = input.ReadString();
          break;
        }
        case 88: {
          GpuMemoryMb = input.ReadInt32();
          break;
        }
        case 96: {
          GpuMultithread = input.ReadBool();
          break;
        }
        case 104: {
          GpuShaderLvl = input.ReadInt32();
          break;
        }
        case 112: {
          MaxCubemapSize = input.ReadInt32();
          break;
        }
        case 120: {
          MaxTextureSize = input.ReadInt32();
          break;
        }
        case 130: {
          Os = input.ReadString();
          break;
        }
        case 136: {
          OsFamily = input.ReadUInt32();
          break;
        }
        case 146: {
          ProcessorName = input.ReadString();
          break;
        }
        case 152: {
          ProcessorCount = input.ReadInt32();
          break;
        }
        case 160: {
          ProcessorFrequency = input.ReadInt32();
          break;
        }
        case 168: {
          BatteryLvl = input.ReadUInt32();
          break;
        }
        case 176: {
          BatteryStatus = input.ReadUInt32();
          break;
        }
        case 184: {
          SystemMemorySizeMb = input.ReadInt32();
          break;
        }
        case 192: {
          SupportedRandomWriteTargetCount = input.ReadInt32();
          break;
        }
        case 200: {
          SupportedRenderTargetCount = input.ReadInt32();
          break;
        }
        case 208: {
          Supports2DArrayTexture = input.ReadBool();
          break;
        }
        case 216: {
          Supports32BitsIndexBuffer = input.ReadBool();
          break;
        }
        case 224: {
          Supports3DRenderTextures = input.ReadBool();
          break;
        }
        case 232: {
          Supports3DTextures = input.ReadBool();
          break;
        }
        case 240: {
          SupportsAsyncCompute = input.ReadBool();
          break;
        }
        case 248: {
          SupportsAsyncGPUReadback = input.ReadBool();
          break;
        }
        case 256: {
          SupportsComputeShader = input.ReadBool();
          break;
        }
        case 264: {
          SupportsCubemapArrayTextures = input.ReadBool();
          break;
        }
        case 272: {
          SupportsGeometryShaders = input.ReadBool();
          break;
        }
        case 280: {
          SupportsGraphicFence = input.ReadBool();
          break;
        }
        case 288: {
          SupportsHardwareQuadTopology = input.ReadBool();
          break;
        }
        case 296: {
          SupportsGPUDrawCallInstancing = input.ReadBool();
          break;
        }
        case 304: {
          SupportsLocationService = input.ReadBool();
          break;
        }
        case 312: {
          SupportsMipStreaming = input.ReadBool();
          break;
        }
        case 320: {
          SupportsMotionVector = input.ReadBool();
          break;
        }
        case 328: {
          SupportsMultisampleAutoResolve = input.ReadBool();
          break;
        }
        case 336: {
          SupportsMultisampledTextures = input.ReadInt32();
          break;
        }
        case 344: {
          SupportsSeparatedRenderTargetsBlend = input.ReadBool();
          break;
        }
        case 352: {
          SupportsSetConstantBuffer = input.ReadBool();
          break;
        }
        case 360: {
          SupportsSparseTextures = input.ReadBool();
          break;
        }
        case 368: {
          SupportsTessellationShaders = input.ReadBool();
          break;
        }
        case 376: {
          SupportsTextureWrapMirrorOnce = input.ReadInt32();
          break;
        }
        case 384: {
          ScreenWidth = input.ReadUInt32();
          break;
        }
        case 392: {
          ScreenHeight = input.ReadUInt32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class InteractionSummary : pb::IMessage<InteractionSummary>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<InteractionSummary> _parser = new pb::MessageParser<InteractionSummary>(() => new InteractionSummary());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<InteractionSummary> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AnalyticsDataReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public InteractionSummary() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public InteractionSummary(InteractionSummary other) : this() {
    name_ = other.name_;
    count_ = other.count_;
    hours_ = other.hours_;
    min_ = other.min_;
    sec_ = other.sec_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public InteractionSummary Clone() {
    return new InteractionSummary(this);
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 1;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "count" field.</summary>
  public const int CountFieldNumber = 2;
  private uint count_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Count {
    get { return count_; }
    set {
      count_ = value;
    }
  }

  /// <summary>Field number for the "hours" field.</summary>
  public const int HoursFieldNumber = 3;
  private ulong hours_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong Hours {
    get { return hours_; }
    set {
      hours_ = value;
    }
  }

  /// <summary>Field number for the "min" field.</summary>
  public const int MinFieldNumber = 4;
  private ulong min_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong Min {
    get { return min_; }
    set {
      min_ = value;
    }
  }

  /// <summary>Field number for the "sec" field.</summary>
  public const int SecFieldNumber = 5;
  private ulong sec_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong Sec {
    get { return sec_; }
    set {
      sec_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as InteractionSummary);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(InteractionSummary other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Name != other.Name) return false;
    if (Count != other.Count) return false;
    if (Hours != other.Hours) return false;
    if (Min != other.Min) return false;
    if (Sec != other.Sec) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (Count != 0) hash ^= Count.GetHashCode();
    if (Hours != 0UL) hash ^= Hours.GetHashCode();
    if (Min != 0UL) hash ^= Min.GetHashCode();
    if (Sec != 0UL) hash ^= Sec.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (Name.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Name);
    }
    if (Count != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(Count);
    }
    if (Hours != 0UL) {
      output.WriteRawTag(24);
      output.WriteUInt64(Hours);
    }
    if (Min != 0UL) {
      output.WriteRawTag(32);
      output.WriteUInt64(Min);
    }
    if (Sec != 0UL) {
      output.WriteRawTag(40);
      output.WriteUInt64(Sec);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (Name.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Name);
    }
    if (Count != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(Count);
    }
    if (Hours != 0UL) {
      output.WriteRawTag(24);
      output.WriteUInt64(Hours);
    }
    if (Min != 0UL) {
      output.WriteRawTag(32);
      output.WriteUInt64(Min);
    }
    if (Sec != 0UL) {
      output.WriteRawTag(40);
      output.WriteUInt64(Sec);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (Count != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
    }
    if (Hours != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Hours);
    }
    if (Min != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Min);
    }
    if (Sec != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Sec);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(InteractionSummary other) {
    if (other == null) {
      return;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.Count != 0) {
      Count = other.Count;
    }
    if (other.Hours != 0UL) {
      Hours = other.Hours;
    }
    if (other.Min != 0UL) {
      Min = other.Min;
    }
    if (other.Sec != 0UL) {
      Sec = other.Sec;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Name = input.ReadString();
          break;
        }
        case 16: {
          Count = input.ReadUInt32();
          break;
        }
        case 24: {
          Hours = input.ReadUInt64();
          break;
        }
        case 32: {
          Min = input.ReadUInt64();
          break;
        }
        case 40: {
          Sec = input.ReadUInt64();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          Name = input.ReadString();
          break;
        }
        case 16: {
          Count = input.ReadUInt32();
          break;
        }
        case 24: {
          Hours = input.ReadUInt64();
          break;
        }
        case 32: {
          Min = input.ReadUInt64();
          break;
        }
        case 40: {
          Sec = input.ReadUInt64();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class UserData : pb::IMessage<UserData>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<UserData> _parser = new pb::MessageParser<UserData>(() => new UserData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<UserData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AnalyticsDataReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UserData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UserData(UserData other) : this() {
    paid_ = other.paid_;
    licenseID_ = other.licenseID_;
    sessionCount_ = other.sessionCount_;
    tutorialCompletion_ = other.tutorialCompletion_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UserData Clone() {
    return new UserData(this);
  }

  /// <summary>Field number for the "paid" field.</summary>
  public const int PaidFieldNumber = 1;
  private bool paid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Paid {
    get { return paid_; }
    set {
      paid_ = value;
    }
  }

  /// <summary>Field number for the "licenseID" field.</summary>
  public const int LicenseIDFieldNumber = 2;
  private string licenseID_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string LicenseID {
    get { return licenseID_; }
    set {
      licenseID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "sessionCount" field.</summary>
  public const int SessionCountFieldNumber = 3;
  private uint sessionCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint SessionCount {
    get { return sessionCount_; }
    set {
      sessionCount_ = value;
    }
  }

  /// <summary>Field number for the "tutorialCompletion" field.</summary>
  public const int TutorialCompletionFieldNumber = 4;
  private bool tutorialCompletion_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool TutorialCompletion {
    get { return tutorialCompletion_; }
    set {
      tutorialCompletion_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as UserData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(UserData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Paid != other.Paid) return false;
    if (LicenseID != other.LicenseID) return false;
    if (SessionCount != other.SessionCount) return false;
    if (TutorialCompletion != other.TutorialCompletion) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Paid != false) hash ^= Paid.GetHashCode();
    if (LicenseID.Length != 0) hash ^= LicenseID.GetHashCode();
    if (SessionCount != 0) hash ^= SessionCount.GetHashCode();
    if (TutorialCompletion != false) hash ^= TutorialCompletion.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (Paid != false) {
      output.WriteRawTag(8);
      output.WriteBool(Paid);
    }
    if (LicenseID.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(LicenseID);
    }
    if (SessionCount != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(SessionCount);
    }
    if (TutorialCompletion != false) {
      output.WriteRawTag(32);
      output.WriteBool(TutorialCompletion);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (Paid != false) {
      output.WriteRawTag(8);
      output.WriteBool(Paid);
    }
    if (LicenseID.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(LicenseID);
    }
    if (SessionCount != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(SessionCount);
    }
    if (TutorialCompletion != false) {
      output.WriteRawTag(32);
      output.WriteBool(TutorialCompletion);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Paid != false) {
      size += 1 + 1;
    }
    if (LicenseID.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(LicenseID);
    }
    if (SessionCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SessionCount);
    }
    if (TutorialCompletion != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(UserData other) {
    if (other == null) {
      return;
    }
    if (other.Paid != false) {
      Paid = other.Paid;
    }
    if (other.LicenseID.Length != 0) {
      LicenseID = other.LicenseID;
    }
    if (other.SessionCount != 0) {
      SessionCount = other.SessionCount;
    }
    if (other.TutorialCompletion != false) {
      TutorialCompletion = other.TutorialCompletion;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Paid = input.ReadBool();
          break;
        }
        case 18: {
          LicenseID = input.ReadString();
          break;
        }
        case 24: {
          SessionCount = input.ReadUInt32();
          break;
        }
        case 32: {
          TutorialCompletion = input.ReadBool();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Paid = input.ReadBool();
          break;
        }
        case 18: {
          LicenseID = input.ReadString();
          break;
        }
        case 24: {
          SessionCount = input.ReadUInt32();
          break;
        }
        case 32: {
          TutorialCompletion = input.ReadBool();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class SessionData : pb::IMessage<SessionData>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<SessionData> _parser = new pb::MessageParser<SessionData>(() => new SessionData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SessionData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AnalyticsDataReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SessionData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SessionData(SessionData other) : this() {
    user_ = other.user_ != null ? other.user_.Clone() : null;
    sessionUID_ = other.sessionUID_;
    sessionMachine_ = other.sessionMachine_ != null ? other.sessionMachine_.Clone() : null;
    sessionTimestamp_ = other.sessionTimestamp_ != null ? other.sessionTimestamp_.Clone() : null;
    pageAndToolLog_ = other.pageAndToolLog_.Clone();
    interactionLog_ = other.interactionLog_.Clone();
    pageUseSummary_ = other.pageUseSummary_.Clone();
    toolUseSummary_ = other.toolUseSummary_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SessionData Clone() {
    return new SessionData(this);
  }

  /// <summary>Field number for the "user" field.</summary>
  public const int UserFieldNumber = 1;
  private global::UserData user_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::UserData User {
    get { return user_; }
    set {
      user_ = value;
    }
  }

  /// <summary>Field number for the "sessionUID" field.</summary>
  public const int SessionUIDFieldNumber = 2;
  private string sessionUID_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SessionUID {
    get { return sessionUID_; }
    set {
      sessionUID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "sessionMachine" field.</summary>
  public const int SessionMachineFieldNumber = 3;
  private global::MachineSpec sessionMachine_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MachineSpec SessionMachine {
    get { return sessionMachine_; }
    set {
      sessionMachine_ = value;
    }
  }

  /// <summary>Field number for the "sessionTimestamp" field.</summary>
  public const int SessionTimestampFieldNumber = 4;
  private global::Timestamp sessionTimestamp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Timestamp SessionTimestamp {
    get { return sessionTimestamp_; }
    set {
      sessionTimestamp_ = value;
    }
  }

  /// <summary>Field number for the "pageAndToolLog" field.</summary>
  public const int PageAndToolLogFieldNumber = 5;
  private static readonly pb::FieldCodec<global::TimeLog> _repeated_pageAndToolLog_codec
      = pb::FieldCodec.ForMessage(42, global::TimeLog.Parser);
  private readonly pbc::RepeatedField<global::TimeLog> pageAndToolLog_ = new pbc::RepeatedField<global::TimeLog>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::TimeLog> PageAndToolLog {
    get { return pageAndToolLog_; }
  }

  /// <summary>Field number for the "interactionLog" field.</summary>
  public const int InteractionLogFieldNumber = 6;
  private static readonly pb::FieldCodec<global::UI_Interaction> _repeated_interactionLog_codec
      = pb::FieldCodec.ForMessage(50, global::UI_Interaction.Parser);
  private readonly pbc::RepeatedField<global::UI_Interaction> interactionLog_ = new pbc::RepeatedField<global::UI_Interaction>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::UI_Interaction> InteractionLog {
    get { return interactionLog_; }
  }

  /// <summary>Field number for the "pageUseSummary" field.</summary>
  public const int PageUseSummaryFieldNumber = 7;
  private static readonly pb::FieldCodec<global::InteractionSummary> _repeated_pageUseSummary_codec
      = pb::FieldCodec.ForMessage(58, global::InteractionSummary.Parser);
  private readonly pbc::RepeatedField<global::InteractionSummary> pageUseSummary_ = new pbc::RepeatedField<global::InteractionSummary>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::InteractionSummary> PageUseSummary {
    get { return pageUseSummary_; }
  }

  /// <summary>Field number for the "toolUseSummary" field.</summary>
  public const int ToolUseSummaryFieldNumber = 8;
  private static readonly pb::FieldCodec<global::InteractionSummary> _repeated_toolUseSummary_codec
      = pb::FieldCodec.ForMessage(66, global::InteractionSummary.Parser);
  private readonly pbc::RepeatedField<global::InteractionSummary> toolUseSummary_ = new pbc::RepeatedField<global::InteractionSummary>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::InteractionSummary> ToolUseSummary {
    get { return toolUseSummary_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SessionData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SessionData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(User, other.User)) return false;
    if (SessionUID != other.SessionUID) return false;
    if (!object.Equals(SessionMachine, other.SessionMachine)) return false;
    if (!object.Equals(SessionTimestamp, other.SessionTimestamp)) return false;
    if(!pageAndToolLog_.Equals(other.pageAndToolLog_)) return false;
    if(!interactionLog_.Equals(other.interactionLog_)) return false;
    if(!pageUseSummary_.Equals(other.pageUseSummary_)) return false;
    if(!toolUseSummary_.Equals(other.toolUseSummary_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (user_ != null) hash ^= User.GetHashCode();
    if (SessionUID.Length != 0) hash ^= SessionUID.GetHashCode();
    if (sessionMachine_ != null) hash ^= SessionMachine.GetHashCode();
    if (sessionTimestamp_ != null) hash ^= SessionTimestamp.GetHashCode();
    hash ^= pageAndToolLog_.GetHashCode();
    hash ^= interactionLog_.GetHashCode();
    hash ^= pageUseSummary_.GetHashCode();
    hash ^= toolUseSummary_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (user_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(User);
    }
    if (SessionUID.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(SessionUID);
    }
    if (sessionMachine_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(SessionMachine);
    }
    if (sessionTimestamp_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(SessionTimestamp);
    }
    pageAndToolLog_.WriteTo(output, _repeated_pageAndToolLog_codec);
    interactionLog_.WriteTo(output, _repeated_interactionLog_codec);
    pageUseSummary_.WriteTo(output, _repeated_pageUseSummary_codec);
    toolUseSummary_.WriteTo(output, _repeated_toolUseSummary_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (user_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(User);
    }
    if (SessionUID.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(SessionUID);
    }
    if (sessionMachine_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(SessionMachine);
    }
    if (sessionTimestamp_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(SessionTimestamp);
    }
    pageAndToolLog_.WriteTo(ref output, _repeated_pageAndToolLog_codec);
    interactionLog_.WriteTo(ref output, _repeated_interactionLog_codec);
    pageUseSummary_.WriteTo(ref output, _repeated_pageUseSummary_codec);
    toolUseSummary_.WriteTo(ref output, _repeated_toolUseSummary_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (user_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
    }
    if (SessionUID.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionUID);
    }
    if (sessionMachine_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(SessionMachine);
    }
    if (sessionTimestamp_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(SessionTimestamp);
    }
    size += pageAndToolLog_.CalculateSize(_repeated_pageAndToolLog_codec);
    size += interactionLog_.CalculateSize(_repeated_interactionLog_codec);
    size += pageUseSummary_.CalculateSize(_repeated_pageUseSummary_codec);
    size += toolUseSummary_.CalculateSize(_repeated_toolUseSummary_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SessionData other) {
    if (other == null) {
      return;
    }
    if (other.user_ != null) {
      if (user_ == null) {
        User = new global::UserData();
      }
      User.MergeFrom(other.User);
    }
    if (other.SessionUID.Length != 0) {
      SessionUID = other.SessionUID;
    }
    if (other.sessionMachine_ != null) {
      if (sessionMachine_ == null) {
        SessionMachine = new global::MachineSpec();
      }
      SessionMachine.MergeFrom(other.SessionMachine);
    }
    if (other.sessionTimestamp_ != null) {
      if (sessionTimestamp_ == null) {
        SessionTimestamp = new global::Timestamp();
      }
      SessionTimestamp.MergeFrom(other.SessionTimestamp);
    }
    pageAndToolLog_.Add(other.pageAndToolLog_);
    interactionLog_.Add(other.interactionLog_);
    pageUseSummary_.Add(other.pageUseSummary_);
    toolUseSummary_.Add(other.toolUseSummary_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (user_ == null) {
            User = new global::UserData();
          }
          input.ReadMessage(User);
          break;
        }
        case 18: {
          SessionUID = input.ReadString();
          break;
        }
        case 26: {
          if (sessionMachine_ == null) {
            SessionMachine = new global::MachineSpec();
          }
          input.ReadMessage(SessionMachine);
          break;
        }
        case 34: {
          if (sessionTimestamp_ == null) {
            SessionTimestamp = new global::Timestamp();
          }
          input.ReadMessage(SessionTimestamp);
          break;
        }
        case 42: {
          pageAndToolLog_.AddEntriesFrom(input, _repeated_pageAndToolLog_codec);
          break;
        }
        case 50: {
          interactionLog_.AddEntriesFrom(input, _repeated_interactionLog_codec);
          break;
        }
        case 58: {
          pageUseSummary_.AddEntriesFrom(input, _repeated_pageUseSummary_codec);
          break;
        }
        case 66: {
          toolUseSummary_.AddEntriesFrom(input, _repeated_toolUseSummary_codec);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          if (user_ == null) {
            User = new global::UserData();
          }
          input.ReadMessage(User);
          break;
        }
        case 18: {
          SessionUID = input.ReadString();
          break;
        }
        case 26: {
          if (sessionMachine_ == null) {
            SessionMachine = new global::MachineSpec();
          }
          input.ReadMessage(SessionMachine);
          break;
        }
        case 34: {
          if (sessionTimestamp_ == null) {
            SessionTimestamp = new global::Timestamp();
          }
          input.ReadMessage(SessionTimestamp);
          break;
        }
        case 42: {
          pageAndToolLog_.AddEntriesFrom(ref input, _repeated_pageAndToolLog_codec);
          break;
        }
        case 50: {
          interactionLog_.AddEntriesFrom(ref input, _repeated_interactionLog_codec);
          break;
        }
        case 58: {
          pageUseSummary_.AddEntriesFrom(ref input, _repeated_pageUseSummary_codec);
          break;
        }
        case 66: {
          toolUseSummary_.AddEntriesFrom(ref input, _repeated_toolUseSummary_codec);
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class CursorTimelog : pb::IMessage<CursorTimelog>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<CursorTimelog> _parser = new pb::MessageParser<CursorTimelog>(() => new CursorTimelog());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CursorTimelog> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AnalyticsDataReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CursorTimelog() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CursorTimelog(CursorTimelog other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CursorTimelog Clone() {
    return new CursorTimelog(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CursorTimelog);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CursorTimelog other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CursorTimelog other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
      }
    }
  }
  #endif

}

public sealed partial class SessionCursorHistory : pb::IMessage<SessionCursorHistory>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<SessionCursorHistory> _parser = new pb::MessageParser<SessionCursorHistory>(() => new SessionCursorHistory());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SessionCursorHistory> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AnalyticsDataReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SessionCursorHistory() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SessionCursorHistory(SessionCursorHistory other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SessionCursorHistory Clone() {
    return new SessionCursorHistory(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SessionCursorHistory);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SessionCursorHistory other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SessionCursorHistory other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
      }
    }
  }
  #endif

}

#endregion


#endregion Designer generated code
